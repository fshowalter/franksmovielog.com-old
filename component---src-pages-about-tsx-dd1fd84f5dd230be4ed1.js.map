{"version":3,"sources":["webpack:///./src/pages/about.tsx"],"names":["PanelHeader","PanelHeading","PanelSlug","styleVars","React","memo","title","slug","rangeInputMixin","About","location","data","parse","marked","page","markdown","rawMarkdownBody","pedantic","toString","query"],"mappings":"uTAWMA,EAAc,sBAAH,mBAAG,CAAH,uJAWXC,EAAe,kBAAH,mBAAG,CAAH,6DAKZC,EAAY,mBAAH,mBAAG,CAAH,6GAqGTC,GAzFYC,IAAMC,MAAK,YAAuC,IAApCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KACrC,OACE,YAACP,EAAD,KACE,YAACC,EAAD,KAAeK,GACf,YAACJ,EAAD,KAAYK,OAKL,kBAAH,mBAAG,CAAH,+GASOH,IAAMC,KAAN,gRAmBH,mBAAH,mBAAG,CAAH,wJAUE,mBAAH,mBAAG,CAAH,+IA2Ce,QADnBF,EAKgB,8BAyJhBK,GAtJU,kBAAH,mBAAG,CAAH,uNAYG,mBAAH,mBAAG,CAAH,0CAIK,qBAAH,mBAAG,CAAH,+CAEOL,EAFP,yDAMJA,EANI,8NAqBO,mBAAH,oBAAG,CAAH,6GAMG,mBAAH,oBAAG,CAAH,8CAIL,qBAAH,oBAAG,CAAH,sHAQS,sBAAH,oBAAG,CAAH,+DAGKA,EAHL,yDAONA,EAPM,iIAiBG,mBAAH,oBAAG,CAAH,gKAYO,mBAAH,oBAAG,CAAH,k6BAkEG,CAAH,gWAyBC,qBAAH,oBAAG,CAClBK,EADe,uBAKG,qBAAH,oBAAG,CAClBA,EADe,4CAyJJ,SAASC,EAAT,GAAuD,EAAtCC,SAAsC,IAA5BC,EAA4B,EAA5BA,KACxC,OACE,YAAC,IAAD,KACGC,IACCC,IAAOF,EAAKG,KAAKC,SAASC,gBAAiB,CACzCC,UAAU,IACTC,aAMJ,IAAMC,EAAQ","file":"component---src-pages-about-tsx-dd1fd84f5dd230be4ed1.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport parse from \"html-react-parser\";\nimport marked from \"marked\";\nimport React, { ReactNode } from \"react\";\n\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { WindowLocation } from \"@reach/router\";\n\nimport Layout from \"../components/Layout\";\n\nconst PanelHeader = styled.header`\n  padding: 35px 20px 20px;\n  text-align: center;\n\n  @media only screen and (min-width: 50em) {\n    margin: 20px;\n    padding: 20px;\n    text-align: left;\n  }\n`;\n\nconst PanelHeading = styled.h1`\n  line-height: 60px;\n  margin-bottom: 0;\n`;\n\nconst PanelSlug = styled.div`\n  color: var(--color-text-secondary);\n  font-size: 15px;\n  line-height: 20px;\n  margin-bottom: 0;\n`;\n\ninterface PanelHeaderProps {\n  title: string;\n  slug: string;\n}\n\nconst PanelHead = React.memo(({ title, slug }: PanelHeaderProps) => {\n  return (\n    <PanelHeader>\n      <PanelHeading>{title}</PanelHeading>\n      <PanelSlug>{slug}</PanelSlug>\n    </PanelHeader>\n  );\n});\n\nconst List = styled.ol`\n  margin: 0 0 35px;\n  padding: 0;\n\n  @media only screen and (min-width: 50em) {\n    margin-top: 24px;\n  }\n`;\n\nconst ListItem = React.memo(styled.li`\n  font-weight: normal;\n  list-style-type: none;\n  padding: 0;\n  position: relative;\n\n  &:after {\n    background-color: var(--color-primary);\n    bottom: 0;\n    content: \"\";\n    display: block;\n    height: 1px;\n    left: 20px;\n    margin: 0;\n    position: absolute;\n    right: 0;\n  }\n`);\n\nconst Title = styled.div`\n  display: block;\n  font-size: 18px;\n  line-height: 40px;\n  overflow: hidden;\n  padding: 20px 20px 0;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst Slug = styled.div`\n  color: var(--color-text-hint);\n  font-size: 15px;\n  line-height: 20px;\n  padding: 0 20px 20px;\n  text-rendering: optimizeLegibility;\n`;\n\ninterface WatchlistPerson {\n  fullName: string;\n}\n\nconst formatPeople = (\n  people: Array<WatchlistPerson>,\n  suffix: string\n): string => {\n  if (people.length === 0) {\n    return \"\";\n  }\n  const names = people.map((person) => person.fullName);\n\n  const formattedNames = new Intl.ListFormat(\"en\").format(names);\n\n  return `${formattedNames} ${suffix}`;\n};\n\ninterface WatchlistCollection {\n  name: string;\n}\n\nconst formatCollections = (collections: Array<WatchlistCollection>): string => {\n  if (collections.length === 0) {\n    return \"\";\n  }\n\n  const names = collections.map((collection) => collection.name);\n\n  const formattedNames = new Intl.ListFormat(\"en\").format(names);\n\n  return `it's a ${formattedNames} film`;\n};\n\nconst styleVars = {\n  filterBackgroundColor: \"#fff\",\n  filterBorderColor: \"var(--color-primary)\",\n  filterSliderActiveHandleBackgroundColor: \"#eaeaea\",\n  filterSliderBackgroundColor: \"rgba(0, 0, 0, .02)\",\n  filterTextBoxColor: \"var(--color-text-secondary)\",\n};\n\nconst Heading = styled.h2`\n  border-bottom: 1px solid var(--color-primary);\n  color: var(--color-accent);\n  display: block;\n  font-size: 19px;\n  font-weight: normal;\n  margin: 0 0 20px;\n  padding: 20px;\n  position: relative;\n  text-decoration: none;\n`;\n\nconst Content = styled.div`\n  padding: 0 20px;\n`;\n\nconst TextInput = styled.input`\n  backface-visibility: hidden;\n  background-color: ${styleVars.filterBackgroundColor};\n  border: 0;\n  border-radius: 0;\n  box-sizing: border-box;\n  color: ${styleVars.filterTextBoxColor};\n  display: block;\n  font-family: var(--font-family-system);\n  font-size: 16px;\n  outline: none;\n  padding: 0;\n  width: 100%;\n  ::placeholder {\n    color: var(--color-text-hint);\n    font-family: var(--font-family-system);\n    font-size: 14px;\n    font-weight: normal;\n  }\n`;\n\nconst TextInputWrap = styled.div`\n  border-bottom: solid 1px var(--color-primary);\n  margin-bottom: 8px;\n  padding-bottom: 7px;\n`;\n\nconst FilterControl = styled.div`\n  margin-bottom: 35px;\n`;\n\nconst Label = styled.label`\n  color: var(--color-accent);\n  display: block;\n  font-size: 15px;\n  font-weight: normal;\n  line-height: 2.2;\n`;\n\nconst SelectInput = styled.select`\n  appearance: none;\n  backface-visibility: hidden;\n  background-color: ${styleVars.filterBackgroundColor};\n  border: 0;\n  border-radius: 0;\n  box-sizing: border-box;\n  color: ${styleVars.filterTextBoxColor};\n  display: block;\n  font-family: var(--font-family-system);\n  font-size: 15px;\n  padding: 0;\n  text-indent: 0.01px;\n  text-overflow: \"\";\n  width: 100%;\n`;\n\nconst FiltersWrap = styled.div`\n  border: 1px solid var(--color-primary);\n  border-radius: 5px;\n  margin: 20px;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n\n  .js-filters & {\n    opacity: 1;\n  }\n`;\n\nconst RangeFilterWrap = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-around;\n\n  .noUi-target * {\n    background-color: rgba(0, 0, 0, 0.02);\n    box-sizing: border-box;\n    cursor: default;\n    touch-action: none;\n    -webkit-touch-callout: none;\n    transition: transform 0.3s ease-in-out;\n    user-select: none;\n  }\n\n  .noUi-active {\n    background-color: #eaeaea;\n    box-shadow: inset 0 0 5px var(--color-primary);\n  }\n\n  .noUi-state-drag .noUi-active {\n    transform: scale(1.25);\n  }\n\n  .noUi-base {\n    background: rgba(0, 0, 0, 0.02);\n    border-bottom: solid 0.5rem #fff;\n    border-top: solid 0.5rem #fff;\n    height: 2rem;\n    margin: auto 0.8rem;\n    position: relative;\n\n    @media only screen and (min-width: 35em) {\n      border-color: #fff;\n    }\n  }\n\n  .noUi-handle {\n    background-color: #fff;\n    border: 1px solid var(--color-accent);\n    border-radius: 50%;\n    height: 2rem;\n    left: -1rem;\n    position: relative;\n    top: -0.5rem;\n    width: 2rem;\n    z-index: 1;\n  }\n\n  .noUiSlider {\n    flex: 1 100%;\n  }\n\n  .noUi-origin {\n    border-radius: inherit;\n    bottom: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n\n  .noUi-stacking .noUi-handle {\n    z-index: 10;\n  }\n`;\n\nconst rangeInputMixin = css`\n  appearance: textfield;\n  background-color: #fff;\n  border: 0;\n  box-sizing: content-box;\n  color: var(--color-text-secondary);\n  font-family: var(--font-family-system);\n  font-size: 14px;\n  line-height: 1.2rem;\n  padding: 0;\n  width: 25%;\n\n  &::-webkit-inner-spin-button {\n    appearance: none;\n    margin: 0;\n  }\n\n  width: 3rem;\n\n  @media (min-width: 50em) {\n    height: 1.4rem;\n    line-height: 1.4rem;\n  }\n`;\n\nconst RangeInputMin = styled.input`\n  ${rangeInputMixin}\n  margin-right: auto;\n`;\n\nconst RangeInputMax = styled.input`\n  ${rangeInputMixin}\n  align-self: flex-start;\n  text-align: right;\n`;\n\ninterface RangeFilterProps {\n  name: string;\n  attribute: string;\n  min: string;\n  max: string;\n}\n\nconst RangeFilter: React.FC<RangeFilterProps> = ({\n  name,\n  attribute,\n  min,\n  max,\n}: RangeFilterProps) => {\n  return (\n    <FilterControl>\n      <Label htmlFor={name}>{name}</Label>\n      <RangeFilterWrap\n        data-filter-attribute={attribute}\n        data-filter-type=\"range\"\n        data-filter-min-value={min}\n        data-filter-max-value={max}\n      >\n        <div className=\"noUiSlider noUi-target\">\n          <div className=\"noUi-base noUi-background noUi-horizontal\">\n            <div\n              className=\"noUi-origin noUi-origin-lower\"\n              style={{ left: \"0%\" }}\n            >\n              <div className=\"noUi-handle noUi-handle-lower\" />\n            </div>\n            <div\n              className=\"noUi-origin noUi-origin-upper\"\n              style={{ left: \"100%\" }}\n            >\n              <div className=\"noUi-handle noUi-handle-upper\" />\n            </div>\n          </div>\n        </div>\n        <RangeInputMin\n          type=\"number\"\n          defaultValue={min}\n          min={min}\n          max={max}\n          step=\"1\"\n          className=\"filter-numeric min\"\n        />\n        <RangeInputMax\n          type=\"number\"\n          defaultValue={max}\n          min={min}\n          max={max}\n          step=\"1\"\n          className=\"filter-numeric max\"\n        />\n      </RangeFilterWrap>\n    </FilterControl>\n  );\n};\n\ninterface TextFilterProps {\n  label: string;\n  placeholder: string;\n  filterAttribute: string;\n}\n\nconst TextFilter: React.FC<TextFilterProps> = ({\n  label,\n  placeholder,\n  filterAttribute,\n}: TextFilterProps) => {\n  return (\n    <FilterControl>\n      <Label htmlFor={label}>{label}</Label>\n      <TextInputWrap>\n        <TextInput\n          name={label}\n          placeholder={placeholder}\n          data-filter-type=\"text\"\n          data-filter-attribute={filterAttribute}\n        />\n      </TextInputWrap>\n    </FilterControl>\n  );\n};\n\ninterface FilterPanelProps {\n  heading: string;\n  children: ReactNode;\n}\n\nconst FilterPanel: React.FC<FilterPanelProps> = ({\n  heading,\n  children,\n}: FilterPanelProps) => {\n  return (\n    <FiltersWrap data-filter-controls data-target=\"#watchlist-titles\">\n      <Heading>{heading}</Heading>\n      <Content>{children}</Content>\n    </FiltersWrap>\n  );\n};\n\ninterface SorterProps {\n  name: string;\n  children: Array<[string, string]>;\n  target: string;\n}\n\nconst Sorter: React.FC<SorterProps> = ({\n  name,\n  children,\n  target,\n}: SorterProps) => {\n  return (\n    <FilterControl>\n      <Label htmlFor={name}>{name}</Label>\n      <SelectInput\n        name={name}\n        data-sorter={children[0][1]}\n        data-target={target}\n      >\n        {children.map(([optionName, optionValue]) => {\n          return (\n            <option key={optionName} value={optionValue}>\n              {name}\n            </option>\n          );\n        })}\n      </SelectInput>\n    </FilterControl>\n  );\n};\n\ninterface Props {\n  location: WindowLocation;\n  data: {\n    page: {\n      slug: string;\n      date: string;\n      title: string;\n      markdown: {\n        rawMarkdownBody: string;\n      };\n    };\n  };\n}\n\nexport default function About({ location, data }: Props): JSX.Element {\n  return (\n    <Layout>\n      {parse(\n        marked(data.page.markdown.rawMarkdownBody, {\n          pedantic: true,\n        }).toString()\n      )}\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query PageForSlug {\n    page(slug: { eq: \"about\" }) {\n      slug\n      date\n      title\n      markdown {\n        rawMarkdownBody\n        backdrop {\n          childImageSharp {\n            fluid(toFormat: JPG, jpegQuality: 75) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}